def encoding(msg, poly):
    # Ensure that the polynomial starts with '1'
    if poly[0] != '1':
        raise ValueError("Polynomial must start with '1'")
    
    poly_len = len(poly)
    data_len = len(msg)
    
    # Pad the message with zeros equal to the degree of the polynomial
    msg += '0' * (poly_len - 1)
    
    # Convert message and polynomial to lists for easy manipulation
    msg = list(msg)
    poly = list(poly)
    
    for i in range(data_len):
        if msg[i] == '1':
            for j in range(poly_len):
                msg[i + j] = str(int(msg[i + j]) ^ int(poly[j]))
    
    # The result is the CRC encoded data (encoded_msg)
    encoded_msg = ''.join(msg)
    
    return msg, encoded_msg

def decoding(rcv, poly):
    # Ensure that the polynomial starts with '1'
    if poly[0] != '1':
        raise ValueError("Polynomial must start with '1'")
    
    poly_len = len(poly)
    
    # Convert received data and polynomial to lists for easy manipulation
    received_data = list(rcv.replace(" ", ""))
    poly = list(poly)
    
    for i in range(len(received_data) - poly_len + 1):
        if received_data[i] == '1':
            for j in range(poly_len):
                received_data[i + j] = str(int(received_data[i + j]) ^ int(poly[j]))
    
    # Check if the result is all zeros (no error)
    if all(bit == '0' for bit in received_data[-poly_len + 1:]):
        return 'No error'
    else:
        return 'Error'

# Examples and test cases
org_sig1 = '1010'
poly = '100101'
_, encoded_output1 = encoding(org_sig1, poly)
print(f"Encoded Output 1: {org_sig1} {encoded_output1}")

org_sig2 = '1100'
_, encoded_output2 = encoding(org_sig2, poly)
print(f"Encoded Output 2: {org_sig2} {encoded_output2}")

received_sig1 = '1010 00111'
print(f"Decoding Result 1: {received_sig1} => {decoding(received_sig1, poly)}")

received_sig2 = '1010 01111'
print(f"Decoding Result 2: {received_sig2} => {decoding(received_sig2, poly)}")

received_sig3 = '1100 11001'
print(f"Decoding Result 3: {received_sig3} => {decoding(received_sig3, poly)}")

received_sig4 = '1100 11111'
print(f"Decoding Result 4: {received_sig4} => {decoding(received_sig4, poly)}")
